/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./assets/js/src/index.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./assets/js/src/index.js":
/*!********************************!*\
  !*** ./assets/js/src/index.js ***!
  \********************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("/**\r\n * Entry Point\r\n *\r\n * @since 0.1.0\r\n */\n// Import styles.\n// import '../../css/src/styles.scss';\njQuery(document).ready(function () {\n  var mwpalLoadEventsResponse = true; // Global variable to check events loading response.\n  // select2 for site selection select input.\n\n  if ('activity-log' === scriptData.currentTab) {\n    jQuery('.mwp-ssas').select2({\n      width: 313\n    });\n  }\n  /**\r\n   * Site events switch handler.\r\n   */\n\n\n  jQuery('.mwp-ssas').on('change', function () {\n    var value = jQuery(this).val();\n    jQuery('#mwpal-site-id').val(value);\n    jQuery('#audit-log-viewer').submit();\n  });\n  /**\r\n   * Number of events switch handler.\r\n   */\n\n  jQuery('.mwp-ipps').on('change', function () {\n    var value = jQuery(this).val();\n    jQuery(this).attr('disabled', true);\n    jQuery.post(scriptData.ajaxURL, {\n      action: 'set_per_page_events',\n      count: value,\n      nonce: scriptData.scriptNonce\n    }, function () {\n      location.reload();\n    });\n  });\n  /**\r\n   * Refresh WSAL Child Sites.\r\n   */\n\n  jQuery('#mwpal-wsal-sites-refresh').click(function () {\n    var refreshBtn = jQuery(this);\n    var refreshMsg = jQuery('#mwpal-wcs-refresh-message');\n    refreshBtn.attr('disabled', true);\n    refreshBtn.val(scriptData.refreshing);\n    jQuery(refreshMsg).show();\n    jQuery.post(scriptData.ajaxURL, {\n      action: 'refresh_child_sites',\n      nonce: scriptData.scriptNonce,\n      mwpal_forced: true,\n      mwpal_run_id: scriptData.runId\n    }, function (response) {\n      console.log(response);\n      scriptData.runId = response.data.run_id; // if we are complete then reload the page.\n\n      if (response.data.complete === true) {\n        location.reload();\n      } else {\n        // indicate progress by showing a date of last message.\n        var d = new Date();\n        jQuery(refreshMsg).find('.last-message-time').html(d.getHours() + ':' + d.getMinutes() + ':' + d.getSeconds());\n        refreshBtn.attr('disabled', false);\n        refreshBtn.removeAttr('disabled');\n        jQuery(refreshBtn).trigger('click');\n      }\n    });\n  });\n  /**\r\n   * Retrive Logs Manually\r\n   */\n\n  jQuery('#mwpal-wsal-manual-retrieve').click(function () {\n    var retrieveBtn = jQuery(this);\n    retrieveBtn.attr('disabled', true);\n    retrieveBtn.val(scriptData.retrieving);\n    jQuery.post(scriptData.ajaxURL, {\n      action: 'retrieve_events_manually',\n      nonce: scriptData.scriptNonce\n    }, function () {\n      location.reload();\n    });\n  });\n  /**\r\n   * Add Sites to Active Activity Log.\r\n   */\n\n  jQuery('#mwpal-wcs-add-btn').click(function (e) {\n    e.preventDefault();\n    var addSites = jQuery('#mwpal-wcs input[type=checkbox]'); // Get checkboxes.\n\n    transferSites('mwpal-wcs', 'mwpal-wcs-al', addSites, 'add-sites');\n  });\n  /**\r\n   * Remove Sites from Active Activity Log.\r\n   */\n\n  jQuery('#mwpal-wcs-remove-btn').click(function (e) {\n    e.preventDefault();\n    var removeSites = jQuery('#mwpal-wcs-al input[type=checkbox]'); // Get checkboxes.\n\n    transferSites('mwpal-wcs-al', 'mwpal-wcs', removeSites, 'remove-sites');\n  });\n  /**\r\n   * Transfer sites in and out of active activity log.\r\n   *\r\n   * @param {string} fromClass     – From HTML class.\r\n   * @param {string} toClass       – To HTML class.\r\n   * @param {array} containerSites – Sites to add/remove.\r\n   * @param {string} action        – Type of action to perform.\r\n   */\n\n  function transferSites(fromClass, toClass, containerSites, action) {\n    var selectedSites = [];\n    var container = jQuery(\"#\".concat(toClass, \" .sites-container\"));\n    var activeWSALSites = jQuery('#mwpal-wsal-child-sites');\n\n    for (var index = 0; index < containerSites.length; index++) {\n      if (jQuery(containerSites[index]).is(':checked')) {\n        selectedSites.push(jQuery(containerSites[index]).val());\n      }\n    }\n\n    jQuery.ajax({\n      type: 'POST',\n      url: scriptData.ajaxURL,\n      async: true,\n      dataType: 'json',\n      data: {\n        action: 'update_active_wsal_sites',\n        nonce: scriptData.scriptNonce,\n        transferAction: action,\n        activeSites: activeWSALSites.val(),\n        requestSites: selectedSites.toString()\n      },\n      success: function success(data) {\n        if (data.success && selectedSites.length) {\n          for (var _index = 0; _index < selectedSites.length; _index++) {\n            var spanElement = jQuery('<span></span>');\n            var inputElement = jQuery('<input />');\n            inputElement.attr('type', 'checkbox');\n            var labelElement = jQuery('<label></label>');\n            var tempElement = jQuery(\"#\".concat(fromClass, \"-site-\").concat(selectedSites[_index])); // Prepare input element.\n\n            inputElement.attr('name', \"\".concat(toClass, \"[]\"));\n            inputElement.attr('id', \"\".concat(toClass, \"-site-\").concat(selectedSites[_index]));\n            inputElement.attr('value', tempElement.val()); // Prepare label element.\n\n            labelElement.attr('for', \"\".concat(toClass, \"-site-\").concat(selectedSites[_index]));\n            labelElement.html(tempElement.parent().find('label').text()); // Append the elements together.\n\n            spanElement.append(inputElement);\n            spanElement.append(labelElement);\n            container.append(spanElement); // Remove the temp element.\n\n            tempElement.parent().remove();\n          }\n\n          activeWSALSites.val(data.activeSites);\n        } else {\n          console.log(data.message);\n        }\n      },\n      error: function error(xhr, textStatus, _error) {\n        console.log(xhr.statusText);\n        console.log(textStatus);\n        console.log(_error);\n      }\n    });\n  }\n  /**\r\n   * Load Events for Infinite Scroll.\r\n   *\r\n   * @since 1.0.3\r\n   *\r\n   * @param {integer} pageNumber - Log viewer page number.\r\n   */\n\n\n  function mwpalLoadEvents(pageNumber) {\n    jQuery('#mwpal-event-loader').show('fast');\n    /*\r\n     * Gets the view type. Defaults to 'list' but could be 'grid'. Only\r\n     * those 2 types are supported. Validation handled server side.\r\n     */\n\n    var view = scriptData.userView;\n\n    if (null === view || view.length < 1) {\n      view = 'list';\n    }\n\n    jQuery.ajax({\n      type: 'POST',\n      url: ajaxurl,\n      data: {\n        action: 'mwpal_infinite_scroll_events',\n        mwpal_viewer_security: scriptData.scriptNonce,\n        page_number: pageNumber,\n        page: scriptData.page,\n        'mwpal-site-id': scriptData.siteId,\n        orderby: scriptData.orderBy,\n        order: scriptData.order,\n        'get-events': scriptData.getEvents,\n        s: scriptData.searchTerm,\n        filters: scriptData.searchFilters,\n        view: view\n      },\n      success: function success(html) {\n        jQuery('#mwpal-event-loader').hide('1000');\n\n        if (html) {\n          mwpalLoadEventsResponse = true;\n          jQuery('#audit-log-viewer #the-list').append(html); // This will be the div where our content will be loaded.\n        } else {\n          mwpalLoadEventsResponse = false;\n          jQuery('#mwpal-auditlog-end').show('fast');\n        }\n      },\n      error: function error(xhr, textStatus, _error2) {\n        console.log(xhr.statusText);\n        console.log(textStatus);\n        console.log(_error2);\n      }\n    });\n\n    if (mwpalLoadEventsResponse) {\n      return pageNumber + 1;\n    }\n\n    return 0;\n  }\n  /**\r\n   * Load events for Infinite Scroll.\r\n   *\r\n   * @since 1.0.3\r\n   */\n\n\n  if (scriptData.infiniteScroll) {\n    var count = 2;\n    jQuery(window).scroll(function () {\n      if (jQuery(window).scrollTop() === jQuery(document).height() - jQuery(window).height()) {\n        if (0 !== count) {\n          count = mwpalLoadEvents(count);\n        }\n      }\n    });\n  }\n  /**\r\n   * Select all events toggle handling code.\r\n   *\r\n   * @since 1.0.4\r\n   */\n\n\n  jQuery('#mwpal-toggle-events-table>thead>tr>th>:checkbox').change(function () {\n    jQuery(this).parents('table:first').find('tbody>tr>th>:checkbox').attr('checked', this.checked);\n  });\n  /**\r\n   * Events toggle handling code.\r\n   *\r\n   * @since 1.0.4\r\n   */\n\n  jQuery('#mwpal-toggle-events-table>tbody>tr>th>:checkbox').change(function () {\n    var allchecked = 0 === jQuery(this).parents('tbody:first').find('th>:checkbox:not(:checked)').length;\n    jQuery(this).parents('table:first').find('thead>tr>th:first>:checkbox:first').attr('checked', allchecked);\n  });\n  /**\r\n   * Close upgrade to premium notice\r\n   */\n\n  jQuery('.mwpal-notice').on('click', '.close-btn a', function () {\n    // Store this element\n    var _this = jQuery(this); // dismissed notice\n\n\n    var noticeData = {\n      action: 'mwpal_advert_dismissed',\n      mwp_nonce: scriptData.scriptNonce\n    };\n\n    var noticeType = _this.attr('data-notice');\n\n    if (typeof noticeType !== 'undefined' && noticeType.length > 1) {\n      noticeData.mwpal_notice_type = noticeType;\n    }\n\n    jQuery.post(ajaxurl, noticeData, function (response) {\n      // If check update field response.\n      if (response.status) {\n        _this.parents('.mwpal-notice').remove();\n      }\n    }, 'json').fail(function (error) {\n      console.log(error);\n    });\n  });\n  jQuery('#purge-trigger').on('click', {}, function () {\n    var pruneButton = jQuery(this);\n    jQuery(pruneButton).attr(\"disabled\", true);\n    jQuery.post(ajaxurl, {\n      action: 'mwpal_purge_logs',\n      mwp_nonce: scriptData.scriptNonce\n    }, 'json').fail(function (error) {\n      console.log(error);\n    }).success(function (msg) {\n      console.log(msg);\n      jQuery(\"#log-purged-popup\").modal('show');\n      jQuery(pruneButton).attr(\"disabled\", false);\n    });\n  });\n  jQuery('.close-log-purged-popup').on('click', {}, function () {\n    jQuery(\"#log-purged-popup\").modal('hide');\n  });\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./assets/js/src/index.js\n");

/***/ })

/******/ });